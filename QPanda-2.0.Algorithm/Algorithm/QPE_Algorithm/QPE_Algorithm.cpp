/*
Copyright (c) 2017-2018 Origin Quantum Computing. All Right Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "QPE_Algorithm.h"

OriginQCircuit& QFT(vector<Qubit*> qvec)
{
    OriginQCircuit & qft = CreateEmptyCircuit();
    for(auto i=0;i<qvec.size();i++)
    {
        qft << H(qvec[qvec.size()- 1 - i]);
        for (auto j = i+1; j < qvec.size(); j++)
        {
            qft << QDouble(1.0 / (1 <<(j-i+1) ), 1.0 / (1 << (j-i)), 0, 0,
                qvec[qvec.size() -1 - j], qvec[qvec.size() -1- i]);
        }
    }
    return qft;
}
OriginQCircuit& QFTdagger(vector<Qubit*> qvec)
{
    OriginQCircuit & qft = QFT(qvec);
    qft.dagger();
    return qft;
}

//single qubit,Hadamard
//+1:[0.923879532511287,0.382683432365090],RY(0.785398163397448)
//-1:[0.382683432365090,-0.923879532511287],RY(0.785398163397448+PI)
OriginQCircuit&   unitary(vector<Qubit*> qvec)
{
    OriginQCircuit & circuit = CreateEmptyCircuit();
    circuit << H(qvec[0]);
    return circuit;
}

// U is generated by qc,
// output U^(2^min)
OriginQCircuit&   unitarypower(vector<Qubit*> qvec, size_t min, QGEN qc)
{
    OriginQCircuit & circuit = CreateEmptyCircuit();
    for (auto i = 0; i < (1 << min); i++)
    {
        //circuit << qc(qvec);
    }
    return circuit;
}
OriginQCircuit&   Hadamard(vector<Qubit*> qvec)
{
    OriginQCircuit & circuit = CreateEmptyCircuit();
    for (auto iter = qvec.begin(); iter != qvec.end(); iter++)
    {
        circuit << H(*iter);
    }
    return circuit;
}
OriginQCircuit& QPE(vector<Qubit*> controlqvec, vector<Qubit*> targetqvec, QGEN qc)
{
    OriginQCircuit & circuit = CreateEmptyCircuit();
    //circuit << Hadamard(controlqvec);
    for (auto i = 0; i < controlqvec.size(); i++)
    {
        circuit << H(controlqvec[i]);
    }
    vector<Qubit*> controlqubit;
    for (auto i=0;i<controlqvec.size();i++)
    {
        controlqubit.push_back(controlqvec[controlqvec.size() - 1 - i]);
        //circuit << unitarypower(targetqvec, i, qc).control(controlqubit);
        controlqubit.pop_back();
    }
    //circuit << QFTdagger(controlqvec);
    return circuit;
}
void QPE_AlgorithmTest()
{
    init();
    int qubitnum = 2;
    vector<Qubit*> cqv;      //control
    for (size_t i = 0; i < qubitnum; i++)
    {
        cqv.push_back(qAlloc());
    }
    vector<Qubit*> tqv;
    tqv.push_back(qAlloc());//target
    vector<CBit*> cv;
    int cbitnum = 2;
    for (size_t i = 0; i < cbitnum; i++)
    {
        cv.push_back(cAlloc());
    }
    auto &qpeprog = CreateEmptyQProg();
    //qpeprog << RY(tqv[0], PI / 8);
    //qpeprog << QFT(cqv);
   // qpeprog << QFT(cqv).dagger();
    qpeprog << QPE(cqv, tqv, unitary);
    QGEN qcc = unitary;
    //qpeprog << qcc(cqv);
    //qpeprog << Hadamard(cqv);
    qpeprog << Measure(cqv[0], cv[0]) << Measure(cqv[1], cv[1]);

    load(qpeprog);
    run();
    auto resultMap = getResultMap();
    cout << "c0: " << resultMap["c0"] << endl;
    cout << "c1: " << resultMap["c1"] << endl;
    finalize();
    //return resultMap;
}


